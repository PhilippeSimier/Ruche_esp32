/* 
 * File:   FeldHell.cpp
 * Author: philippe
 * 
 * Created on 3 août 2021, 09:35
 */

#include "FeldHell.h"

/**
 * @brief Constructeur avec paramètres 
 * @param Freq   Fréquency 
 * @param br     Baud rate () 
 */
FeldHell::FeldHell(float _frequency, float _br) :
leFsk(new Fsk(_frequency, 0, _br * 2)),
frequency(_frequency),
br(_br) {
    leFsk->begin();
}

FeldHell::FeldHell(const FeldHell& orig) {
}

FeldHell::~FeldHell() {
    delete leFsk;
}

void FeldHell::tx(char * message) {
    leFsk->start();

    const static word GlyphTab[59][8] PROGMEM = {
        {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x1f9c, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x0330, 0x0ffc, 0x0330, 0x0ffc, 0x0330, 0x0000, 0x0000},
        {0x078c, 0x0ccc, 0x1ffe, 0x0ccc, 0x0c78, 0x0000, 0x0000},
        {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x01e0, 0x0738, 0x1c0e, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x1c0e, 0x0738, 0x01e0, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x018c, 0x0198, 0x0ff0, 0x0198, 0x018c, 0x0000, 0x0000},
        {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x001c, 0x001c, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x001c, 0x0070, 0x01c0, 0x0700, 0x1c00, 0x0000, 0x0000},
        {0x07f8, 0x0c0c, 0x0c0c, 0x0c0c, 0x07f8, 0x0000, 0x0000},
        {0x0300, 0x0600, 0x0ffc, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x061c, 0x0c3c, 0x0ccc, 0x078c, 0x000c, 0x0000, 0x0000},
        {0x0006, 0x1806, 0x198c, 0x1f98, 0x00f0, 0x0000, 0x0000},
        {0x1fe0, 0x0060, 0x0060, 0x0ffc, 0x0060, 0x0000, 0x0000},
        {0x000c, 0x000c, 0x1f8c, 0x1998, 0x18f0, 0x0000, 0x0000},
        {0x07fc, 0x0c66, 0x18c6, 0x00c6, 0x007c, 0x0000, 0x0000},
        {0x181c, 0x1870, 0x19c0, 0x1f00, 0x1c00, 0x0000, 0x0000},
        {0x0f3c, 0x19e6, 0x18c6, 0x19e6, 0x0f3c, 0x0000, 0x0000},
        {0x0f80, 0x18c6, 0x18cc, 0x18cc, 0x0ff0, 0x0000, 0x0000},
        {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
        {0x1800, 0x1800, 0x19ce, 0x1f00, 0x0000, 0x0000, 0x0000},
        {0x01f0, 0x0208, 0x04e4, 0x0514, 0x0514, 0x03e0, 0x0000},
        {0x07fc, 0x0e60, 0x0c60, 0x0e60, 0x07fc, 0x0000, 0x0000},
        {0x0c0c, 0x0ffc, 0x0ccc, 0x0ccc, 0x0738, 0x0000, 0x0000},
        {0x0ffc, 0x0c0c, 0x0c0c, 0x0c0c, 0x0c0c, 0x0000, 0x0000},
        {0x0c0c, 0x0ffc, 0x0c0c, 0x0c0c, 0x07f8, 0x0000, 0x0000},
        {0x0ffc, 0x0ccc, 0x0ccc, 0x0c0c, 0x0c0c, 0x0000, 0x0000},
        {0x0ffc, 0x0cc0, 0x0cc0, 0x0c00, 0x0c00, 0x0000, 0x0000},
        {0x0ffc, 0x0c0c, 0x0c0c, 0x0ccc, 0x0cfc, 0x0000, 0x0000},
        {0x0ffc, 0x00c0, 0x00c0, 0x00c0, 0x0ffc, 0x0000, 0x0000},
        {0x0c0c, 0x0c0c, 0x0ffc, 0x0c0c, 0x0c0c, 0x0000, 0x0000},
        {0x003c, 0x000c, 0x000c, 0x000c, 0x0ffc, 0x0000, 0x0000},
        {0x0ffc, 0x00c0, 0x00e0, 0x0330, 0x0e1c, 0x0000, 0x0000},
        {0x0ffc, 0x000c, 0x000c, 0x000c, 0x000c, 0x0000, 0x0000},
        {0x0ffc, 0x0600, 0x0300, 0x0600, 0x0ffc, 0x0000, 0x0000},
        {0x0ffc, 0x0700, 0x01c0, 0x0070, 0x0ffc, 0x0000, 0x0000},
        {0x0ffc, 0x0c0c, 0x0c0c, 0x0c0c, 0x0ffc, 0x0000, 0x0000},
        {0x0c0c, 0x0ffc, 0x0ccc, 0x0cc0, 0x0780, 0x0000, 0x0000},
        {0x0ffc, 0x0c0c, 0x0c3c, 0x0ffc, 0x000f, 0x0000, 0x0000},
        {0x0ffc, 0x0cc0, 0x0cc0, 0x0cf0, 0x079c, 0x0000, 0x0000},
        {0x078c, 0x0ccc, 0x0ccc, 0x0ccc, 0x0c78, 0x0000, 0x0000},
        {0x0c00, 0x0c00, 0x0ffc, 0x0c00, 0x0c00, 0x0000, 0x0000},
        {0x0ff8, 0x000c, 0x000c, 0x000c, 0x0ff8, 0x0000, 0x0000},
        {0x0ffc, 0x0038, 0x00e0, 0x0380, 0x0e00, 0x0000, 0x0000},
        {0x0ff8, 0x000c, 0x00f8, 0x000c, 0x0ff8, 0x0000, 0x0000},
        {0x0e1c, 0x0330, 0x01e0, 0x0330, 0x0e1c, 0x0000, 0x0000},
        {0x0e00, 0x0380, 0x00fc, 0x0380, 0x0e00, 0x0000, 0x0000},
        {0x0c1c, 0x0c7c, 0x0ccc, 0x0f8c, 0x0e0c, 0x0000, 0x0000}
    };
    int val;
    char ch;
    int n;
    word fbits;
    ch = *message++;
    while (ch != '\0') {
        ch = toupper(int(ch));          // Uppercase
        if (ch >= 32 && ch <= 90)       // Character is in the range of ASCII space to Z
        {
            ch -= 32;                   // Character number starting at 0
            for (int i = 0; i < 7; i++) // Scanning each 7 columns of glyph
            {
                fbits = int(pgm_read_word(&GlyphTab[int(ch)][i])); // Get each column of glyph
                for (int b = 0; b < 14; b++) // Scanning each 14 rows
                {
                    val = bitRead(fbits, b); // Get binary state of pixel          
                    if (val == 1) {
                        leFsk->sendBit(1);   // dds.sendBitFreq(frequency);
                    } else {
                        leFsk->sendBitOff(); 
                    }
                }
            }
        }
        ch = *message++; // Next character in string
    }
    leFsk->stop();

}

